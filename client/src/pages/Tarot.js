import React, { useState, useEffect } from 'react'
import axios from "axios";
import { useMutation } from '@apollo/client';
import { useQuery } from '@apollo/client';
import { SAVE_TAROT } from '../utils/mutations';
import { QUERY_CARD } from '../utils/queries';
import TarotCard from '../components/TarotCard';

const Tarot = () => {
    // set initial state of tarot cards
    const [tarotCards, setTarotCards] = useState({ loveCard: '', careerCard: '', financeCard: ''});
    // set initial state of card reads
    const [tarotRead, setTarotRead] = useState({ love: '', career: '', finance: ''});
    // change button value
    const [buttonValue, setButtonValue] = useState("false");

    // saveTarotRead function
    const [ saveTarot, {error} ] = useMutation(SAVE_TAROT);


    // api info imported from dotenv
    const userID = process.env.REACT_APP_USER_ID;
    const apiKey = process.env.REACT_APP_API_KEY;

    // to be called on button click
    const handleCardPull = (event) => {
      const { id } = event.target;
      const pullCard = function() {
        // define random number function
        const randomNumber = function(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        // call function with numbers between 1 and 78
        return randomNumber(1,78);
      };
      // generates random number
      const number = pullCard();
      // checks which category of card to update with random number
      if (id === "love") {
        setTarotCards({...tarotCards, loveCard: number});
        event.target.style.display = "none";
      };
      if (id === "career") {
        setTarotCards({...tarotCards, careerCard: number});
        event.target.style.display = "none";
      };
      if (id === "finance") {
        setTarotCards({...tarotCards, financeCard: number});
        event.target.style.display = "none";
      };
    };

    // add tarot reading to mongo database
    const generateReading = async(event) => {
      if (buttonValue === "false") {
        setButtonValue("true");
      }
      event.target.style.display = "none";
      tarotData(love, career, finance);
    };

    const saveFunction = async function() {
      try {
        const reading = JSON.stringify({...tarotRead});
        console.log(reading);
        const { data } = await saveTarot({
          variables: {reading: reading},
        });
      } catch (e) {
        console.error(e);
      }
    };

    const resetFunction = function() {
      if (buttonValue === "true") {
        setButtonValue("false");
      }
      // clear form values
      setTarotRead({
        loveCard: '',
        careerCard: '',
        financeCard: ''
      });
      // clear form values
      setTarotCards({
        loveCard: '',
        careerCard: '',
        financeCard: ''
      });
    };
    
    // Cards randomly generated by buttons to be passed through the API
    const love = tarotCards.loveCard;
    const career = tarotCards.careerCard;
    const finance = tarotCards.financeCard;

    // defining tarot data function
    const tarotData = function(love, career, finance)  {
      // defining function
      const getResponse = (love, career, finance) => {
        const url = "https://json.astrologyapi.com/v1/tarot_predictions";
        const auth = "Basic" + " " + btoa(userID + ":" + apiKey);
        axios.post(url, {
          love: love,
          career: career,
          finance: finance
          }, {
          headers: {
            Authorization: auth
          }
          }).then((response) => {
          const loveReading = response.data.love;
          const careerReading = response.data.career;
          const financeReading = response.data.finance;
          setTarotRead({love: loveReading, career: careerReading, finance: financeReading});
        });
      };
      // calling function
      getResponse(love, career, finance);
    };

    // conditional to check if all cards have been pulled
    const checkAllCards = (love && career && finance !== "");

    // calling tarot function (empty array so it runs once)
    useEffect(() => {
      console.log(tarotCards);
    }, [tarotCards]);

    // logging information to console only after state change
    useEffect(() => {
      console.log(tarotRead);
    }, [tarotRead]);

  return (
    <div>
      {checkAllCards ? (
        // if all cards have been pulled render this
        <div>
          <button value={buttonValue} onClick={generateReading}>
            Generate Reading
          </button>
        </div>
        ) : (
        // if not all cards have been pulled render this
        <div>
            <h1>Card Selection</h1>
            <p>Click the buttons below to select tarot cards for each category. Once all three have been selected we will display your reading!</p>
            <div>
              <button id="love" onClick={handleCardPull}>
                Love
              </button>
            </div>
            <div>
              <button id="career" onClick={handleCardPull}>
                Career
              </button>
            </div>
            <div>
              <button id="finance" onClick={handleCardPull}>
                Finance
              </button>
            </div>
        </div>
      )}
      { buttonValue === "true" ? (
        // if generate reading button has been clicked, render this
        <div>
          <h1>Love</h1>
          <TarotCard id={love}/>
          <p>{tarotRead.love}</p>
          <h1>Career</h1>
          <TarotCard id={career}/>
          <p>{tarotRead.career}</p>
          <h1>Finance</h1>
          <TarotCard id={finance}/>
          <p>{tarotRead.finance}</p>
          <button onClick={saveFunction}>Save</button>
          <button onClick={resetFunction}>Reset</button>
        </div>
      ) : ( 
        <p></p> 
      )}
    </div>
  )
};

export default Tarot;